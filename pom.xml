<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>sca</groupId>
    <artifactId>sca</artifactId>
    <packaging>pom</packaging>
    <version>0.1</version>
    <modules>
        <module>sca-gw</module>
        <module>sca-eureka-server</module>
        <module>sca-security</module>
    </modules>


    <properties>
        <!--project setting version-->
        <project.build.encoding>UTF-8</project.build.encoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!--depend jars versions-->
        <spring.boot.version>2.2.6.RELEASE</spring.boot.version>
        <spring.cloud.version>Hoxton.SR3</spring.cloud.version>
        <apollo.version>1.5.0</apollo.version>
        <lombok.version>1.18.12</lombok.version>
        <fastjson.version>1.2.68</fastjson.version>
        <mybatis-plus.version>3.3.1</mybatis-plus.version>
        <!--        <spring.cloud.alibaba.version>2.2.0.RELEASE</spring.cloud.alibaba.version>-->

        <!--plugins settings version-->
        <maven.compiler.version>3.8.1</maven.compiler.version>
    </properties>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <dependency>
                <groupId>com.ctrip.framework.apollo</groupId>
                <artifactId>apollo-client</artifactId>
                <version>${apollo.version}</version>
            </dependency>
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <plugins>
            <plugin>
                <!-- 指定maven编译的jdk版本,如果不指定,maven3默认用jdk 1.5 maven2默认用jdk1.3 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.version}</version>
                <configuration>
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <source>${maven.compiler.source}</source> <!-- 源代码使用的JDK版本 -->
                    <target>${maven.compiler.target}</target> <!-- 需要生成的目标class文件的编译版本 -->
                    <encoding>${project.build.encoding}</encoding><!-- 字符集编码 -->
                    <!-- 跳过测试 -->
                    <!--                    <skipTests>true</skipTests>-->
                    <verbose>true</verbose>
                    <showWarnings>true</showWarnings>
                    <!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->
                    <!--                    <fork>true</fork>-->
                    <!-- 使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->
                    <!--                    <executable>&lt;!&ndash; path-to-javac &ndash;&gt;</executable>-->
                    <!-- 指定插件将使用的编译器的版本 -->
                    <!--                    <compilerVersion>1.3</compilerVersion>-->
                    <!-- 编译器使用的初始内存 -->
                    <!--                    <meminitial>128m</meminitial>-->
                    <!-- 编译器使用的最大内存 -->
                    <!--                    <maxmem>512m</maxmem>-->
                    <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
                    <!--                    <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>-->
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>